xlim(-8, 2) +
ylim(50.4, 58.4) +
scale_fill_gradient2(low = 'red3', mid = 'white', high = 'royalblue4', limits(min(n_crisis_diff), max(min(n_crisis_diff)))) +
theme_void() +
plot_default_theme +
theme(legend.position = c(0.8, 0.8),
text = element_text(size = 10)) +
ggtitle('Population change April to July') +
labs(fill = 'Population\nChange')
p_map <- gadm %>%
left_join(map_data, by = c('NAME_3')) %>%
ggplot() +
geom_sf(data = world, size = 0.1, fill = 'transparent') +
geom_sf(aes(fill = n_crisis_diff), size = 0.1, color = 'black') +
xlim(-8, 2) +
ylim(50.4, 58.4) +
scale_fill_gradient2(low = 'red3', mid = 'white', high = 'royalblue4', limits = c(min(n_crisis_diff), max(min(n_crisis_diff)))) +
theme_void() +
plot_default_theme +
theme(legend.position = c(0.8, 0.8),
text = element_text(size = 10)) +
ggtitle('Population change April to July') +
labs(fill = 'Population\nChange')
p_map <- gadm %>%
left_join(map_data, by = c('NAME_3')) %>%
ggplot() +
geom_sf(data = world, size = 0.1, fill = 'transparent') +
geom_sf(aes(fill = n_crisis_diff), size = 0.1, color = 'black') +
xlim(-8, 2) +
ylim(50.4, 58.4) +
scale_fill_gradient2(low = 'red3', mid = 'white', high = 'royalblue4', limits = c(min(map_data$n_crisis_diff), max(min(map_data$n_crisis_diff)))) +
theme_void() +
plot_default_theme +
theme(legend.position = c(0.8, 0.8),
text = element_text(size = 10)) +
ggtitle('Population change April to July') +
labs(fill = 'Population\nChange')
p_map
p_map <- gadm %>%
left_join(map_data, by = c('NAME_3')) %>%
ggplot() +
geom_sf(data = world, size = 0.1, fill = 'transparent') +
geom_sf(aes(fill = n_crisis_diff), size = 0.1, color = 'black') +
xlim(-8, 2) +
ylim(50.4, 58.4) +
scale_fill_gradient2(low = 'red3', mid = 'white', high = 'royalblue4') +
theme_void() +
plot_default_theme +
theme(legend.position = c(0.8, 0.8),
text = element_text(size = 10)) +
ggtitle('Population change April to July') +
labs(fill = 'Population\nChange')
map_title <- letter_title('d')
p_map <- cowplot::plot_grid(map_title, p_map, rel_heights = c(0.05, 1), nrow = 2)
p_map
p_map <- gadm %>%
left_join(map_data, by = c('NAME_3')) %>%
ggplot() +
geom_sf(data = world, size = 0.1, fill = 'transparent') +
geom_sf(aes(fill = n_crisis_diff), size = 0.1, color = 'black') +
xlim(-8, 2) +
ylim(50.4, 58.4) +
scale_fill_gradient2(low = 'red3', mid = 'white', high = 'royalblue4') +
theme_void() +
plot_default_theme +
theme(legend.position = c(0.8, 0.8),
text = element_text(size = 10)) +
ggtitle('Population change April to July') +
labs(fill = 'Population\nChange')
map_title <- letter_title('d')
p_map <- cowplot::plot_grid(map_title, p_map, rel_heights = c(0.05, 1), nrow = 2)
p_ts <- cowplot::plot_grid(p_norm, p_raw, nrow = 2)
p_oa <- p_oa_compare
p <- cowplot::plot_grid(p_ts, p_oa, p_map, nrow = 1)
ggsave('/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/reports/figures/holiday_pop.png',
p,
width = 11, height = 5,
units = 'in')
ggsave('/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/reports/figures/holiday_pop.pdf',
p,
width = 9, height = 7,
units = 'in',
useDingbats = F)
p_map <- gadm %>%
left_join(map_data, by = c('NAME_3')) %>%
ggplot() +
geom_sf(data = world, size = 0.1, fill = 'transparent') +
geom_sf(aes(fill = n_crisis_diff), size = 0.1, color = 'black') +
xlim(-8, 2) +
ylim(50.4, 58.4) +
scale_fill_gradient2(low = 'red3', mid = 'white', high = 'darkblue') +
theme_void() +
plot_default_theme +
theme(legend.position = c(0.8, 0.8),
text = element_text(size = 10)) +
ggtitle('Population change April to July') +
labs(fill = 'Population\nChange')
p_map
p_map
ggsave('/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/reports/figures/holiday_pop.pdf',
p,
width = 11, height = 5,
units = 'in',
useDingbats = F)
#Visualise OA population vs mean FB pop (internal movement) per tile over time periods
suppressPackageStartupMessages({
require(tidyverse)
require(sf)
require(colorspace)
})
source('/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/src/visualization/utils/plot_default_theme.R')
if(interactive()){
.args <-  c('/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/data/interim/mobility_hours.csv',
'/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/data/processed/oa_reference/tile_12_oa_pop.csv',
'/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/data/processed/tile_reference/tiles_zoom_12.shp',
'/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/data/processed/la_reference/a3_tile_reference.csv',
'/Users/hamishgibbs/Documents/Covid-19/facebook_mobility_uk/reports/figures/tile_oa_pop_comparison.png')
} else {
.args <- commandArgs(trailingOnly = T)
}
mob <- read_csv(.args[1])
mob %>%
group_by(date_time) %>%
summarise(n_crisis = sum(n_crisis, na.rm = T)) %>% pull(n_crisis) %>% mean
oa_pop <- read_csv(.args[2], col_types = cols()) %>%
mutate(quadkey_12 = str_pad(quadkey_12, 12, pad = "0"))
tiles <- st_read(.args[3]) %>%
st_set_crs(4326)
tiles <- st_read(.args[3]) %>%
st_set_crs(4326)
a3 <- read_csv(.args[4])
world <- rnaturalearth::ne_countries(scale = 'large', returnclass = 'sf')
p_tot <- mob %>%
mutate(date_time = as.Date(date_time)) %>%
group_by(date_time) %>%
summarise(n_crisis = sum(n_crisis, na.rm = T)) %>%
filter(date_time <= as.Date('2020-09-10')) %>%
ggplot() +
geom_path(aes(x = date_time, y = n_crisis)) +
ylab('Facebook users') +
theme_bw() +
plot_default_theme +
theme(plot.margin = unit(c(0,1.5,0,0), "cm"),
text = element_text(size = 12),
axis.title.x = element_blank())
setwd('/Users/hamishgibbs/Documents/Covid-19/RtD3')
testthat::test_dir(testthat::test_path())
devtools::install()
?missing
require(tidyverse)
geoData = sf::st_read('https://raw.githubusercontent.com/hamishgibbs/rt_interactive_vis/master/geo_data/world.geojson')
geoData = rnaturalearth::ne_countries(returnclass = 'sf')
#geoData = sf::st_read('https://raw.githubusercontent.com/hamishgibbs/rt_interactive_vis/master/geo_data/world.geojson')
geoData = rnaturalearth::ne_countries(returnclass = 'sf')
summaryData = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/summary_table.csv')
summaryData_Deaths = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/deaths/summary/summary_table.csv')
r0Data = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/rt.csv')
casesInfectionData = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/cases_by_infection.csv')
casesReportData = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/cases_by_report.csv')
obsCasesData = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/reported_cases.csv')
rtData_Deaths = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/deaths/summary/rt.csv')
casesInfectionData_Deaths = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/deaths/summary/cases_by_infection.csv')
casesReportData_Deaths = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/deaths/summary/cases_by_report.csv')
obsCasesData_Deaths = readr::read_csv('https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/deaths/summary/reported_cases.csv')
r0Data <- r0Data %>%
rename(region = country)
r0Data
casesInfectionData <- casesInfectionData %>%
rename(region = country)
casesReportData <- casesReportData %>%
rename(region = country)
rtData_Deaths <- rtData_Deaths %>%
rename(region = country)
casesInfectionData_Deaths <- casesInfectionData_Deaths %>%
rename(region = country)
casesReportData_Deaths <- casesReportData_Deaths %>%
rename(region = country)
summaryData <- summaryData %>%
rename(Region = Country)
summaryData_Deaths <- summaryData_Deaths %>%
rename(Region = Country)
rtData = list('Cases' = list('summaryData' = summaryData, 'rtData' = r0Data, 'casesInfectionData' = casesInfectionData, 'casesReportData' = casesReportData, 'obsCasesData' = obsCasesData),
'Deaths' = list('summaryData' = summaryData_Deaths, 'rtData' = rtData_Deaths, 'casesInfectionData' = casesInfectionData_Deaths, 'casesReportData' = casesReportData_Deaths, 'obsCasesData' = obsCasesData_Deaths))
RtD3::summaryWidget(
geoData = geoData,
rtData = rtData,
)
devtools::check()
check_input_data <- function(arg_types, geoData = NULL, rtData = NULL){
if(!is.null(geoData)){
if (!'sf' %in% unlist(arg_types['geoData'])){stop('geoData must be an sf object')}
}
if(!is.null(rtData)){
if (!'list' %in% unlist(arg_types['rtData'])){stop('rtData must be a list object')}
}
#check rt data structure
rt_expected_names <- c("summaryData", "rtData", "casesInfectionData", "casesReportData", "obsCasesData")
if(!check_rtData_structure(rtData, rt_expected_names)){stop("Each level of rtData must include ", paste(rt_expected_names, collapse = ' '), ". Missing items should be NULL.")}
#columns in this list must be present in the appropriate datasets
expected_columns <- list(geoData = c('sovereignt', 'geometry'),
rtData = c('region','date','type','median','lower_90','upper_90','lower_50','upper_50'),
obsCasesData = c('region','date','confirm')
)
if (!is.null(geoData)){
if (!check_geoData_columns(geoData, expected_columns[['geoData']])){stop("geoData missing required columns. geoData must contain: ", paste(expected_columns[['geoData']], collapse = ' '))}
}
if (!check_obsCasesData_columns(rtData, expected_columns[['obsCasesData']])){stop("obsCasesData missing required columns. obsCasesData must contain: ", paste(expected_columns[['obsCasesData']], collapse = ' '))}
if (!check_rtData_columns(rtData, expected_columns[['rtData']])){stop("rtData missing required columns. rtData, casesInfectionData, casesReportData must contain: ", paste(expected_columns[['rtData']], collapse = ' '))}
#warn for geoData name intersection issues
if (!is.null(geoData)){
check_geoData_names(geoData = geoData, rtData = rtData)
}
}
devtools::install()
devtools::check()
devtools::check()
check_input_data(arg_types = arg_types, geoData = geoData, rtData = rtData)
summaryWidget <- function(geoData = NULL,
rtData = NULL,
activeArea = NULL,
activeTime = 'all',
runDate = NULL,
subregional_ref = NULL,
width = 900,
elementId = NULL,
dryRun = FALSE) {
arg_types <- sapply(ls(), function(x){return(class(get(x)))})
check_input_data(arg_types = arg_types, geoData = geoData, rtData = rtData)
#if(!is.null(geoData)){
#  if (!'sf' %in% unlist(arg_types['geoData'])){stop('geoData must be an sf object')}
#}
#if(!is.null(rtData)){
#  if (!'list' %in% unlist(arg_types['rtData'])){stop('rtData must be a list object')}
#}
#check rt data structure
#rt_expected_names <- c("summaryData", "rtData", "casesInfectionData", "casesReportData", "obsCasesData")
#if(!check_rtData_structure(rtData, rt_expected_names)){stop("Each level of rtData must include ", paste(rt_expected_names, collapse = ' '), ". Missing items should be NULL.")}
#columns in this list must be present in the appropriate datasets
#expected_columns <- list(geoData = c('sovereignt', 'geometry'),
#  rtData = c('region','date','type','median','lower_90','upper_90','lower_50','upper_50'),
#  obsCasesData = c('region','date','confirm')
#)
#if (!is.null(geoData)){
#  if (!check_geoData_columns(geoData, expected_columns[['geoData']])){stop("geoData missing required columns. geoData must contain: ", paste(expected_columns[['geoData']], collapse = ' '))}
#}
#if (!check_obsCasesData_columns(rtData, expected_columns[['obsCasesData']])){stop("obsCasesData missing required columns. obsCasesData must contain: ", paste(expected_columns[['obsCasesData']], collapse = ' '))}
#if (!check_rtData_columns(rtData, expected_columns[['rtData']])){stop("rtData missing required columns. rtData, casesInfectionData, casesReportData must contain: ", paste(expected_columns[['rtData']], collapse = ' '))}
#warn for geoData name intersection issues
if (!is.null(geoData)){
check_geoData_names(geoData = geoData, rtData = rtData)
}
#define height, which is fixed based on dataset availability
height <- define_height(geoData = geoData, rtData = rtData)
# forward options using x
x = list(
activeArea = activeArea,
activeTime = activeTime,
runDate = runDate,
geoData = geojsonNull(geoData),
rtData = jsonNull(rtData),
subregional_ref = subregional_ref
)
if (!dryRun) {
# create widget
htmlwidgets::createWidget(
name = 'RtD3',
x,
width = width,
height = height,
package = 'RtD3',
elementId = elementId
)
}else{
return(TRUE)
}
}
correct_geoData = sf::st_sf(a=3, geometry = sf::st_sfc(sf::st_point(1:2)))
incorrect_geoData = data.frame('a' = 3)
correct_summaryData = data.frame('a' = 3)
incorrect_summaryData = 'a'
correct_rtData = list()
incorrect_rtData = 'a'
testthat::expect_error(summaryWidget(incorrect_geoData, correct_summaryData, correct_rtData))
testthat::expect_error(summaryWidget(correct_geoData, incorrect_summaryData, correct_rtData))
testthat::expect_error(summaryWidget(correct_geoData, correct_summaryData, incorrect_rtData))
rt <- list('a'=list('a' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a'),
'b'=list('rtData' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a'))
testthat::expect_error(summaryWidget(correct_geoData, correct_summaryData, rt))
rt <- list('a'=list('rtData' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a'),
'b'=list('rtData' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a'))
gd <- sf::st_sf(a=3, geometry = sf::st_sfc(sf::st_point(1:2)))
testthat::expect_error(summaryWidget(gd, correct_summaryData, rt))
summaryWidget(gd, correct_summaryData, rt)
testthat::expect_error(summaryWidget(gd, correct_summaryData, rt))
summaryWidget(gd, correct_summaryData, rt)
summaryWidget(incorrect_geoData, correct_summaryData, correct_rtData)
summaryWidget(correct_geoData, incorrect_summaryData, correct_rtData)
rt <- list('a'=list('a' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a'),
'b'=list('rtData' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a'))
summaryWidget(correct_geoData, correct_summaryData, rt)
rt <- list('a'=list('a' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a'),
'b'=list('rtData' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a'))
rt
summaryWidget(correct_geoData, correct_summaryData, rt)
check_input_data <- function(arg_types, geoData = NULL, rtData = NULL){
print(arg_types)
if(!is.null(geoData)){
if (!'sf' %in% unlist(arg_types['geoData'])){stop('geoData must be an sf object')}
}
if(!is.null(rtData)){
if (!'list' %in% unlist(arg_types['rtData'])){stop('rtData must be a list object')}
}
#check rt data structure
rt_expected_names <- c("summaryData", "rtData", "casesInfectionData", "casesReportData", "obsCasesData")
if(!check_rtData_structure(rtData, rt_expected_names)){stop("Each level of rtData must include ", paste(rt_expected_names, collapse = ' '), ". Missing items should be NULL.")}
#columns in this list must be present in the appropriate datasets
expected_columns <- list(geoData = c('sovereignt', 'geometry'),
rtData = c('region','date','type','median','lower_90','upper_90','lower_50','upper_50'),
obsCasesData = c('region','date','confirm')
)
if (!is.null(geoData)){
if (!check_geoData_columns(geoData, expected_columns[['geoData']])){stop("geoData missing required columns. geoData must contain: ", paste(expected_columns[['geoData']], collapse = ' '))}
}
if (!check_obsCasesData_columns(rtData, expected_columns[['obsCasesData']])){stop("obsCasesData missing required columns. obsCasesData must contain: ", paste(expected_columns[['obsCasesData']], collapse = ' '))}
if (!check_rtData_columns(rtData, expected_columns[['rtData']])){stop("rtData missing required columns. rtData, casesInfectionData, casesReportData must contain: ", paste(expected_columns[['rtData']], collapse = ' '))}
}
summaryWidget <- function(geoData = NULL,
rtData = NULL,
activeArea = NULL,
activeTime = 'all',
runDate = NULL,
subregional_ref = NULL,
width = 900,
elementId = NULL,
dryRun = FALSE) {
arg_types <- sapply(ls(), function(x){return(class(get(x)))})
check_input_data(arg_types = arg_types, geoData = geoData, rtData = rtData)
#if(!is.null(geoData)){
#  if (!'sf' %in% unlist(arg_types['geoData'])){stop('geoData must be an sf object')}
#}
#if(!is.null(rtData)){
#  if (!'list' %in% unlist(arg_types['rtData'])){stop('rtData must be a list object')}
#}
#check rt data structure
#rt_expected_names <- c("summaryData", "rtData", "casesInfectionData", "casesReportData", "obsCasesData")
#if(!check_rtData_structure(rtData, rt_expected_names)){stop("Each level of rtData must include ", paste(rt_expected_names, collapse = ' '), ". Missing items should be NULL.")}
#columns in this list must be present in the appropriate datasets
#expected_columns <- list(geoData = c('sovereignt', 'geometry'),
#  rtData = c('region','date','type','median','lower_90','upper_90','lower_50','upper_50'),
#  obsCasesData = c('region','date','confirm')
#)
#if (!is.null(geoData)){
#  if (!check_geoData_columns(geoData, expected_columns[['geoData']])){stop("geoData missing required columns. geoData must contain: ", paste(expected_columns[['geoData']], collapse = ' '))}
#}
#if (!check_obsCasesData_columns(rtData, expected_columns[['obsCasesData']])){stop("obsCasesData missing required columns. obsCasesData must contain: ", paste(expected_columns[['obsCasesData']], collapse = ' '))}
#if (!check_rtData_columns(rtData, expected_columns[['rtData']])){stop("rtData missing required columns. rtData, casesInfectionData, casesReportData must contain: ", paste(expected_columns[['rtData']], collapse = ' '))}
#warn for geoData name intersection issues
if (!is.null(geoData)){
check_geoData_names(geoData = geoData, rtData = rtData)
}
#define height, which is fixed based on dataset availability
height <- define_height(geoData = geoData, rtData = rtData)
# forward options using x
x = list(
activeArea = activeArea,
activeTime = activeTime,
runDate = runDate,
geoData = geojsonNull(geoData),
rtData = jsonNull(rtData),
subregional_ref = subregional_ref
)
if (!dryRun) {
# create widget
htmlwidgets::createWidget(
name = 'RtD3',
x,
width = width,
height = height,
package = 'RtD3',
elementId = elementId
)
}else{
return(TRUE)
}
}
summaryWidget(correct_geoData, correct_summaryData, rt)
testthat::expect_error(summaryWidget(correct_geoData, correct_summaryData, rt))
summaryWidget(correct_geoData, correct_summaryData, rt)
rt
class(rt)
summaryWidget(correct_geoData, correct_summaryData, rt)
correct_summaryData
summaryWidget(correct_geoData, rt)
rt <- list('a'=list('a' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a', 'summaryData' = 'a'),
'b'=list('rtData' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a', 'summaryData' = 'a'))
summaryWidget(correct_geoData, rt)
testthat::expect_error(summaryWidget(correct_geoData, rt))
devtools::check()
devtools::install()
rm(summaryWidget)
testthat::expect_error(summaryWidget(incorrect_geoData, correct_rtData))
testthat::expect_error(summaryWidget(correct_geoData, correct_rtData))
testthat::expect_error(summaryWidget(correct_geoData, incorrect_rtData))
rt <- list('a'=list('a' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a', 'summaryData' = 'a'),
'b'=list('rtData' = 'a', 'casesInfectionData' = 'a', 'casesReportData' = 'a', "obsCasesData" = 'a', 'summaryData' = 'a'))
testthat::expect_error(summaryWidget(correct_geoData, rt))
summaryWidget(correct_geoData, rt)
summaryWidget <- function(geoData = NULL,
rtData = NULL,
activeArea = NULL,
activeTime = 'all',
runDate = NULL,
subregional_ref = NULL,
width = 900,
elementId = NULL,
dryRun = FALSE) {
arg_types <- sapply(ls(), function(x){return(class(get(x)))})
check_input_data(arg_types = arg_types, geoData = geoData, rtData = rtData)
#if(!is.null(geoData)){
#  if (!'sf' %in% unlist(arg_types['geoData'])){stop('geoData must be an sf object')}
#}
#if(!is.null(rtData)){
#  if (!'list' %in% unlist(arg_types['rtData'])){stop('rtData must be a list object')}
#}
#check rt data structure
#rt_expected_names <- c("summaryData", "rtData", "casesInfectionData", "casesReportData", "obsCasesData")
#if(!check_rtData_structure(rtData, rt_expected_names)){stop("Each level of rtData must include ", paste(rt_expected_names, collapse = ' '), ". Missing items should be NULL.")}
#columns in this list must be present in the appropriate datasets
#expected_columns <- list(geoData = c('sovereignt', 'geometry'),
#  rtData = c('region','date','type','median','lower_90','upper_90','lower_50','upper_50'),
#  obsCasesData = c('region','date','confirm')
#)
#if (!is.null(geoData)){
#  if (!check_geoData_columns(geoData, expected_columns[['geoData']])){stop("geoData missing required columns. geoData must contain: ", paste(expected_columns[['geoData']], collapse = ' '))}
#}
#if (!check_obsCasesData_columns(rtData, expected_columns[['obsCasesData']])){stop("obsCasesData missing required columns. obsCasesData must contain: ", paste(expected_columns[['obsCasesData']], collapse = ' '))}
#if (!check_rtData_columns(rtData, expected_columns[['rtData']])){stop("rtData missing required columns. rtData, casesInfectionData, casesReportData must contain: ", paste(expected_columns[['rtData']], collapse = ' '))}
#warn for geoData name intersection issues
if (!is.null(geoData)){
check_geoData_names(geoData = geoData, rtData = rtData)
}
#define height, which is fixed based on dataset availability
height <- define_height(geoData = geoData, rtData = rtData)
# forward options using x
x = list(
activeArea = activeArea,
activeTime = activeTime,
runDate = runDate,
geoData = geojsonNull(geoData),
rtData = jsonNull(rtData),
subregional_ref = subregional_ref
)
if (!dryRun) {
# create widget
htmlwidgets::createWidget(
name = 'RtD3',
x,
width = width,
height = height,
package = 'RtD3',
elementId = elementId
)
}else{
return(TRUE)
}
}
check_input_data <- function(arg_types, geoData = NULL, rtData = NULL){
print(arg_types)
if(!is.null(geoData)){
if (!'sf' %in% unlist(arg_types['geoData'])){stop('geoData must be an sf object')}
}
if(!is.null(rtData)){
if (!'list' %in% unlist(arg_types['rtData'])){stop('rtData must be a list object')}
}
#check rt data structure
rt_expected_names <- c("summaryData", "rtData", "casesInfectionData", "casesReportData", "obsCasesData")
if(!check_rtData_structure(rtData, rt_expected_names)){stop("Each level of rtData must include ", paste(rt_expected_names, collapse = ' '), ". Missing items should be NULL.")}
#columns in this list must be present in the appropriate datasets
expected_columns <- list(geoData = c('sovereignt', 'geometry'),
rtData = c('region','date','type','median','lower_90','upper_90','lower_50','upper_50'),
obsCasesData = c('region','date','confirm')
)
if (!is.null(geoData)){
if (!check_geoData_columns(geoData, expected_columns[['geoData']])){stop("geoData missing required columns. geoData must contain: ", paste(expected_columns[['geoData']], collapse = ' '))}
}
if (!check_obsCasesData_columns(rtData, expected_columns[['obsCasesData']])){stop("obsCasesData missing required columns. obsCasesData must contain: ", paste(expected_columns[['obsCasesData']], collapse = ' '))}
if (!check_rtData_columns(rtData, expected_columns[['rtData']])){stop("rtData missing required columns. rtData, casesInfectionData, casesReportData must contain: ", paste(expected_columns[['rtData']], collapse = ' '))}
}
summaryWidget(correct_geoData, correct_rtData)
rm(summaryWidget)
devtools::check()
devtools::install()
require(RtD3)
correct_geoData = sf::st_sf(a=3, geometry = sf::st_sfc(sf::st_point(1:2)))
incorrect_geoData = data.frame('a' = 3)
correct_rtData = list()
incorrect_rtData = 'a'
testthat::expect_error(summaryWidget(incorrect_geoData, correct_rtData))
summaryWidget(incorrect_geoData, correct_rtData)
correct_rtData
incorrect_geoData
summaryWidget()
summaryWidget
devtools::install()
devtools::install()
devtools::check()
RtD3::summaryWidget
check_input_data(arg_types = arg_types, geoData = geoData, rtData = rtData)
e
arg_types <- sapply(ls(), function(x){return(class(get(x)))})
check_input_data(arg_types = arg_types, geoData = geoData, rtData = rtData)
devtools::check()
